@startuml

class Game {
  -Player p1
  -Player p2
  -Grid grid
  -boolean first
  +Grid play()
}

class Grid {
  -State[] data
  +mode(int, boolean) : Grid
  +boolean free(int)
  +boolean full()
  +String string()
  +State winner()
}

Grid *-- State : 9
Game *-- Grid

class State {
  -char symbol
  +boolean empty()
  +char symbol()
  +{static} of(boolean)
}


Game *- player.Player

namespace estimation {

    interface Estimation {
      +int estimate(Grid grid, int move, boolean side)
    }

    class MonteCarloEstimation {
      -int count
    }
    class RandomEstimation
    class FullDepthEstimation
    
    Estimation <|-- MonteCarloEstimation 
    Estimation <|-- RandomEstimation
    Estimation <|-- FullDepthEstimation
}

namespace player {

    interface Player {
      +int move(Grid grid, boolean side)
    }

    class EstimatingAI {
      -Estimation estimation
    }
    
    class ForcedPlayer {
      -Player player
    }
    
    class VerbosePlayer {
      -Player player
    }
    EstimatingAI o-- estimation.Estimation

    VerbosePlayer o-- Player
    ForcedPlayer o-- Player
    
    Player <|-- EstimatingAI
    Player <|-- HumanPlayer
    Player <|-- ForcedPlayer
    Player <|-- VerbosePlayer
}

@enduml