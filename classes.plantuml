@startuml

class Game {
  -Player p1
  -Player p2
  -Grid grid
  -int first
  +Game(Grid grid, Player p1, Player p2, int first)
  +Game(Grid grid, Player p1, Player p2)
  +play() : Grid
}

interface Grid {
  +move(String move, int side) : Grid
  +possibleMoves(String cell) : boolean
  +possibleMoves(int side) : List<String>
  +full() : boolean
  +string() : String
  +winner() : State
}

class Grid3x3 {
  -State[] data
}

class Grid4x4 {
  -State[] data
}

Grid3x3 *-- "9" State
Grid4x4 *-- "16" State
Game *-- Grid
Grid <|-- Grid3x3
Grid <|-- Grid4x4


enum State {
  EMPTY
  X
  O
  ---
  -char symbol
  ---
  +empty() : boolean
  +symbol() : char
  +{static} of(boolean)
}


Game *-- Player

interface Estimation {
  +estimate(Grid grid, String move, int side) : int
}

class MonteCarloEstimation {
  -int count
}
class RandomEstimation
class FullDepthEstimation

Estimation <|-- MonteCarloEstimation 
Estimation <|-- RandomEstimation
Estimation <|-- FullDepthEstimation

MonteCarloEstimation o- RandomEstimation : use

interface Player {
  +move(Grid grid, int side) : String
}

class EstimatingAI {
  -estimation : Estimation
}

class ForcedPlayer {
  -player : Player
}

class VerbosePlayer {
  -player : Player
}

class HumanPlayer {
  -message(String msg)
}

EstimatingAI *-- Estimation

VerbosePlayer *-- Player
ForcedPlayer *-- Player

Player <|-- HumanPlayer
Player <|-- ForcedPlayer
Player <|-- EstimatingAI
Player <|-- VerbosePlayer


@enduml